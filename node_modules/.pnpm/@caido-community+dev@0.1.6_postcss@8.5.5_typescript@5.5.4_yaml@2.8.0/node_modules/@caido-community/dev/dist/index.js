// src/config.ts
import { createJiti } from "jiti";

// src/types.ts
import { z } from "zod";
var backendReferenceConfigSchema = z.strictObject({ id: z.string() });
var viteSchema = z.record(z.string(), z.unknown());
var assetsConfigSchema = z.array(z.string()).optional();
var frontendPluginConfigSchema = z.strictObject({
  kind: z.literal("frontend"),
  id: z.string(),
  name: z.string().optional(),
  root: z.string(),
  assets: assetsConfigSchema,
  backend: backendReferenceConfigSchema.nullable().optional(),
  vite: viteSchema.optional()
});
var backendPluginConfigSchema = z.strictObject({
  kind: z.literal("backend"),
  id: z.string(),
  name: z.string().optional(),
  root: z.string(),
  assets: assetsConfigSchema
});
var workflowPluginConfigSchema = z.strictObject({
  kind: z.literal("workflow"),
  id: z.string(),
  name: z.string(),
  root: z.string(),
  definition: z.string()
});
var linksConfigSchema = z.strictObject({
  sponsor: z.string().url().optional()
});
var watchConfigSchema = z.strictObject({
  port: z.number().optional()
});
var caidoConfigSchema = z.strictObject({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  version: z.string().regex(/^\d+\.\d+\.\d+$/),
  author: z.object({
    name: z.string(),
    email: z.string().email().optional(),
    url: z.string().url().optional()
  }),
  links: linksConfigSchema.optional(),
  plugins: z.array(
    z.discriminatedUnion("kind", [
      frontendPluginConfigSchema,
      backendPluginConfigSchema,
      workflowPluginConfigSchema
    ])
  ),
  watch: watchConfigSchema.optional()
});

// src/utils/cp.ts
import { Glob } from "glob";

// src/utils/log.ts
import chalk from "chalk";

// src/config.ts
var defineConfig = (config) => {
  return config;
};
export {
  defineConfig
};
//# sourceMappingURL=index.js.map