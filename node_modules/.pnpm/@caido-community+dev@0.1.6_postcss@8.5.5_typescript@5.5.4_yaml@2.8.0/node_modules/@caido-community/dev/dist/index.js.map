{"version":3,"sources":["../src/config.ts","../src/types.ts","../src/utils/cp.ts","../src/utils/log.ts"],"sourcesContent":["import path from \"path\";\n\nimport { createJiti } from \"jiti\";\n\nimport { type CaidoConfig, caidoConfigSchema } from \"./types\";\nimport { logInfo } from \"./utils\";\n\nconst DEFAULT_CONFIG_FILE = \"caido.config.ts\";\n\nexport async function loadConfig(\n  cwd: string,\n  configPath?: string,\n): Promise<CaidoConfig> {\n  const configFile = configPath || path.resolve(cwd, DEFAULT_CONFIG_FILE);\n  logInfo(`Loading configuration: ${configFile}`);\n\n  try {\n    // Use jiti for dynamic imports\n    const jiti = createJiti(process.cwd(), { interopDefault: true });\n    const config = await jiti.import(configFile, { default: true });\n    return caidoConfigSchema.parse(config);\n  } catch (error) {\n    if (error instanceof Error) {\n      throw new Error(`Failed to load configuration: ${error.message}`);\n    }\n    throw new Error(\"Unknown error occurred\");\n  }\n}\n\nexport const defineConfig = (config: CaidoConfig) => {\n  return config;\n};\n","import { type UserConfig as ViteConfig } from \"vite\";\nimport { z } from \"zod\";\n\nexport type FrontendBuildOutput = {\n  kind: \"frontend\";\n  id: string;\n  name: string;\n  fileName: string;\n  cssFileName: string | undefined;\n  backendId: string | undefined;\n  assets: string[];\n};\n\nexport type BackendBuildOutput = {\n  kind: \"backend\";\n  id: string;\n  name: string;\n  fileName: string;\n  assets: string[];\n};\n\nexport type BuildOutput = FrontendBuildOutput | BackendBuildOutput;\n\nexport const backendReferenceConfigSchema = z.strictObject({ id: z.string() });\n\nconst viteSchema: z.ZodType<ViteConfig> = z.record(z.string(), z.unknown());\n\nexport const assetsConfigSchema = z.array(z.string()).optional();\n\nexport const frontendPluginConfigSchema = z.strictObject({\n  kind: z.literal(\"frontend\"),\n  id: z.string(),\n  name: z.string().optional(),\n  root: z.string(),\n  assets: assetsConfigSchema,\n  backend: backendReferenceConfigSchema.nullable().optional(),\n  vite: viteSchema.optional(),\n});\n\nexport const backendPluginConfigSchema = z.strictObject({\n  kind: z.literal(\"backend\"),\n  id: z.string(),\n  name: z.string().optional(),\n  root: z.string(),\n  assets: assetsConfigSchema,\n});\n\nexport const workflowPluginConfigSchema = z.strictObject({\n  kind: z.literal(\"workflow\"),\n  id: z.string(),\n  name: z.string(),\n  root: z.string(),\n  definition: z.string(),\n});\n\nexport const linksConfigSchema = z.strictObject({\n  sponsor: z.string().url().optional(),\n});\n\nexport const watchConfigSchema = z.strictObject({\n  port: z.number().optional(),\n});\n\nexport const caidoConfigSchema = z.strictObject({\n  id: z.string(),\n  name: z.string(),\n  description: z.string(),\n  version: z.string().regex(/^\\d+\\.\\d+\\.\\d+$/),\n  author: z.object({\n    name: z.string(),\n    email: z.string().email().optional(),\n    url: z.string().url().optional(),\n  }),\n  links: linksConfigSchema.optional(),\n  plugins: z.array(\n    z.discriminatedUnion(\"kind\", [\n      frontendPluginConfigSchema,\n      backendPluginConfigSchema,\n      workflowPluginConfigSchema,\n    ]),\n  ),\n  watch: watchConfigSchema.optional(),\n});\n\n// Type inference\nexport type BackendReferenceConfig = z.infer<\n  typeof backendReferenceConfigSchema\n>;\nexport type FrontendPluginConfig = z.infer<typeof frontendPluginConfigSchema>;\nexport type BackendPluginConfig = z.infer<typeof backendPluginConfigSchema>;\nexport type WorkflowPluginConfig = z.infer<typeof workflowPluginConfigSchema>;\nexport type WatchConfig = z.infer<typeof watchConfigSchema>;\nexport type CaidoConfig = z.infer<typeof caidoConfigSchema>;\n\nexport type ConnectedMessage = {\n  kind: \"connected\";\n  packageId: string;\n  downloadUrl: string;\n};\n\nexport type RebuildMessage = {\n  kind: \"rebuild\";\n  downloadUrl: string;\n};\n\nexport type ErrorMessage = {\n  kind: \"error\";\n  error: string;\n};\n","import fs from \"fs\";\nimport path from \"path\";\n\nimport { Glob } from \"glob\";\n\n/**\n * Copies a file or directory from the source to the destination.\n * Supports glob patterns.\n * @param cwd - The current working directory.\n * @param src - The source glob pattern.\n * @param dest - The destination directory.\n */\nexport function cp(cwd: string, src: string, dest: string) {\n  const glob = new Glob(src, { cwd });\n\n  for (const file of glob) {\n    const fileSrc = path.join(cwd, file);\n\n    // If the source is a file, we need to copy it to the destination.\n    // Otherwise, we need to copy the entire directory content.\n    let fileDest = dest;\n    if (fs.statSync(fileSrc).isFile()) {\n      const fileName = path.basename(file);\n      fileDest = path.join(dest, fileName);\n    }\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\n    fs.cpSync(fileSrc, fileDest, { recursive: true });\n  }\n}\n","import chalk from \"chalk\";\n\nexport function logSuccess(message: string) {\n  console.log(chalk.green(\"[*]\"), message);\n}\n\nexport function logInfo(message: string) {\n  console.log(chalk.blue(\"[*]\"), message);\n}\n\nexport function logError(message: string) {\n  console.error(chalk.red(\"[!]\"), message);\n}\n"],"mappings":";AAEA,SAAS,kBAAkB;;;ACD3B,SAAS,SAAS;AAsBX,IAAM,+BAA+B,EAAE,aAAa,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;AAE7E,IAAM,aAAoC,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,QAAQ,CAAC;AAEnE,IAAM,qBAAqB,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,SAAS;AAExD,IAAM,6BAA6B,EAAE,aAAa;AAAA,EACvD,MAAM,EAAE,QAAQ,UAAU;AAAA,EAC1B,IAAI,EAAE,OAAO;AAAA,EACb,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,MAAM,EAAE,OAAO;AAAA,EACf,QAAQ;AAAA,EACR,SAAS,6BAA6B,SAAS,EAAE,SAAS;AAAA,EAC1D,MAAM,WAAW,SAAS;AAC5B,CAAC;AAEM,IAAM,4BAA4B,EAAE,aAAa;AAAA,EACtD,MAAM,EAAE,QAAQ,SAAS;AAAA,EACzB,IAAI,EAAE,OAAO;AAAA,EACb,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,MAAM,EAAE,OAAO;AAAA,EACf,QAAQ;AACV,CAAC;AAEM,IAAM,6BAA6B,EAAE,aAAa;AAAA,EACvD,MAAM,EAAE,QAAQ,UAAU;AAAA,EAC1B,IAAI,EAAE,OAAO;AAAA,EACb,MAAM,EAAE,OAAO;AAAA,EACf,MAAM,EAAE,OAAO;AAAA,EACf,YAAY,EAAE,OAAO;AACvB,CAAC;AAEM,IAAM,oBAAoB,EAAE,aAAa;AAAA,EAC9C,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS;AACrC,CAAC;AAEM,IAAM,oBAAoB,EAAE,aAAa;AAAA,EAC9C,MAAM,EAAE,OAAO,EAAE,SAAS;AAC5B,CAAC;AAEM,IAAM,oBAAoB,EAAE,aAAa;AAAA,EAC9C,IAAI,EAAE,OAAO;AAAA,EACb,MAAM,EAAE,OAAO;AAAA,EACf,aAAa,EAAE,OAAO;AAAA,EACtB,SAAS,EAAE,OAAO,EAAE,MAAM,iBAAiB;AAAA,EAC3C,QAAQ,EAAE,OAAO;AAAA,IACf,MAAM,EAAE,OAAO;AAAA,IACf,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS;AAAA,IACnC,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS;AAAA,EACjC,CAAC;AAAA,EACD,OAAO,kBAAkB,SAAS;AAAA,EAClC,SAAS,EAAE;AAAA,IACT,EAAE,mBAAmB,QAAQ;AAAA,MAC3B;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,OAAO,kBAAkB,SAAS;AACpC,CAAC;;;AC/ED,SAAS,YAAY;;;ACHrB,OAAO,WAAW;;;AH6BX,IAAM,eAAe,CAAC,WAAwB;AACnD,SAAO;AACT;","names":[]}