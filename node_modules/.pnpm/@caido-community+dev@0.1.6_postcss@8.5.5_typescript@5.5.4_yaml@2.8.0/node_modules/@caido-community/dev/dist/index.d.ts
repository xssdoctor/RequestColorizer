import * as vite from 'vite';
import { UserConfig } from 'vite';
import { z } from 'zod';

declare const caidoConfigSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    version: z.ZodString;
    author: z.ZodObject<{
        name: z.ZodString;
        email: z.ZodOptional<z.ZodString>;
        url: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        email?: string | undefined;
        url?: string | undefined;
    }, {
        name: string;
        email?: string | undefined;
        url?: string | undefined;
    }>;
    links: z.ZodOptional<z.ZodObject<{
        sponsor: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        sponsor?: string | undefined;
    }, {
        sponsor?: string | undefined;
    }>>;
    plugins: z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"frontend">;
        id: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        root: z.ZodString;
        assets: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        backend: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            id: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>>>;
        vite: z.ZodOptional<z.ZodType<UserConfig, z.ZodTypeDef, UserConfig>>;
    }, "strict", z.ZodTypeAny, {
        id: string;
        root: string;
        kind: "frontend";
        backend?: {
            id: string;
        } | null | undefined;
        name?: string | undefined;
        assets?: string[] | undefined;
        vite?: UserConfig | undefined;
    }, {
        id: string;
        root: string;
        kind: "frontend";
        backend?: {
            id: string;
        } | null | undefined;
        name?: string | undefined;
        assets?: string[] | undefined;
        vite?: UserConfig | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"backend">;
        id: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        root: z.ZodString;
        assets: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strict", z.ZodTypeAny, {
        id: string;
        root: string;
        kind: "backend";
        name?: string | undefined;
        assets?: string[] | undefined;
    }, {
        id: string;
        root: string;
        kind: "backend";
        name?: string | undefined;
        assets?: string[] | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"workflow">;
        id: z.ZodString;
        name: z.ZodString;
        root: z.ZodString;
        definition: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        id: string;
        root: string;
        kind: "workflow";
        name: string;
        definition: string;
    }, {
        id: string;
        root: string;
        kind: "workflow";
        name: string;
        definition: string;
    }>]>, "many">;
    watch: z.ZodOptional<z.ZodObject<{
        port: z.ZodOptional<z.ZodNumber>;
    }, "strict", z.ZodTypeAny, {
        port?: number | undefined;
    }, {
        port?: number | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    id: string;
    plugins: ({
        id: string;
        root: string;
        kind: "frontend";
        backend?: {
            id: string;
        } | null | undefined;
        name?: string | undefined;
        assets?: string[] | undefined;
        vite?: UserConfig | undefined;
    } | {
        id: string;
        root: string;
        kind: "backend";
        name?: string | undefined;
        assets?: string[] | undefined;
    } | {
        id: string;
        root: string;
        kind: "workflow";
        name: string;
        definition: string;
    })[];
    name: string;
    description: string;
    version: string;
    author: {
        name: string;
        email?: string | undefined;
        url?: string | undefined;
    };
    links?: {
        sponsor?: string | undefined;
    } | undefined;
    watch?: {
        port?: number | undefined;
    } | undefined;
}, {
    id: string;
    plugins: ({
        id: string;
        root: string;
        kind: "frontend";
        backend?: {
            id: string;
        } | null | undefined;
        name?: string | undefined;
        assets?: string[] | undefined;
        vite?: UserConfig | undefined;
    } | {
        id: string;
        root: string;
        kind: "backend";
        name?: string | undefined;
        assets?: string[] | undefined;
    } | {
        id: string;
        root: string;
        kind: "workflow";
        name: string;
        definition: string;
    })[];
    name: string;
    description: string;
    version: string;
    author: {
        name: string;
        email?: string | undefined;
        url?: string | undefined;
    };
    links?: {
        sponsor?: string | undefined;
    } | undefined;
    watch?: {
        port?: number | undefined;
    } | undefined;
}>;
type CaidoConfig = z.infer<typeof caidoConfigSchema>;

declare const defineConfig: (config: CaidoConfig) => {
    id: string;
    plugins: ({
        id: string;
        root: string;
        kind: "frontend";
        backend?: {
            id: string;
        } | null | undefined;
        name?: string | undefined;
        assets?: string[] | undefined;
        vite?: vite.UserConfig | undefined;
    } | {
        id: string;
        root: string;
        kind: "backend";
        name?: string | undefined;
        assets?: string[] | undefined;
    } | {
        id: string;
        root: string;
        kind: "workflow";
        name: string;
        definition: string;
    })[];
    name: string;
    description: string;
    version: string;
    author: {
        name: string;
        email?: string | undefined;
        url?: string | undefined;
    };
    links?: {
        sponsor?: string | undefined;
    } | undefined;
    watch?: {
        port?: number | undefined;
    } | undefined;
};

export { defineConfig };
